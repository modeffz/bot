require("dotenv").config();
const {
    Client,
    GatewayIntentBits,
    ActionRowBuilder,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    EmbedBuilder,
    ButtonBuilder,
    ButtonStyle,
    StringSelectMenuBuilder,
    Events,
} = require("discord.js");

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.DirectMessages, // –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    ],
});

const TOKEN = process.env.DISCORD_TOKEN;
const targetChannelNameCats = "üöß„Éª–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è";
const sendChannelNameVerify = "üßæ„Éª–∞–Ω–∫–µ—Ç—ã";
const sendChannelName = "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è-–∫-—Ä–ø";
const targetChannelName = "üìá„Éª–∞–Ω–∫–µ—Ç—ã-—Ä–ø";
const roleMap = {
    "1286797732354195556": "1316727278956187689",
    "1316745136482418688": "1316744812472438834",
    "1316745202022617181": "1316744957352087613",
    "1261087264868401233": "1316747490728480769",
};

const targetCategoryId = "1261087209222574243";

client.once("ready", () => {
    console.log(`Bot is starting with a name ${client.user.tag}`);
    client.user.setPresence({
        activities: [{ name: "—É–∫–∞–∑–∞–Ω–∏—è modeffz", type: 2 }], // 0 = –ò–≥—Ä–∞–µ—Ç
        status: "dnd", // online | idle | dnd | invisible
    });
    client.guilds.cache.forEach(async (guild) => {
        try {
            const botMember = await guild.members.fetchMe();
            console.log(`Bot is present in guild: ${guild.name}`);
            console.log("Bot permissions:", botMember.permissions.toArray());
            console.log(
                "Bot roles:",
                botMember.roles.cache.map((role) => role.name).join(", "),
            );
        } catch (error) {
            console.error(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${guild.name}:`,
                error,
            );
        }
    });
});

client.on(Events.InteractionCreate, async (interaction) => {
    try {
        if (interaction.isButton() && interaction.customId === "RolePlay") {
            const modal = new ModalBuilder()
                .setCustomId("RoleModal")
                .setTitle("–ê–Ω–∫–µ—Ç–∞ —Ä–ø");

            const nameRow = new ActionRowBuilder().addComponents(
                new TextInputBuilder()
                    .setCustomId("user_name")
                    .setLabel("–ò–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true),
            );

            const descriptionRow = new ActionRowBuilder().addComponents(
                new TextInputBuilder()
                    .setCustomId("description_user")
                    .setLabel("–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
                    .setStyle(TextInputStyle.Paragraph)
                    .setRequired(true),
            );

            const skillsRow = new ActionRowBuilder().addComponents(
                new TextInputBuilder()
                    .setCustomId("skill_user")
                    .setLabel("–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —É–º–µ–Ω–∏—è")
                    .setStyle(TextInputStyle.Paragraph)
                    .setRequired(true),
            );

            const RPRow = new ActionRowBuilder().addComponents(
                new TextInputBuilder()
                    .setCustomId("RP")
                    .setLabel("–†–ø –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è")
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true),
            );

            modal.addComponents(nameRow, descriptionRow, skillsRow, RPRow);

            await interaction.showModal(modal);
        }

        if (
            interaction.isModalSubmit() &&
            interaction.customId === "RoleModal"
        ) {
            const name = interaction.fields.getTextInputValue("user_name");
            const description =
                interaction.fields.getTextInputValue("description_user");
            const skill = interaction.fields.getTextInputValue("skill_user");
            const RP = interaction.fields.getTextInputValue("RP");

            const embed = new EmbedBuilder()
                .setColor("#FF0037")
                .setTitle("–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –†–ü")
                .setThumbnail(
                    interaction.user.displayAvatarURL({
                        dynamic: true,
                        size: 1024,
                    }),
                )
                .addFields(
                    { name: "–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", value: name },
                    {
                        name: "–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                        value: description,
                    },
                    { name: "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —É–º–µ–Ω–∏—è", value: skill },
                    { name: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–ø", value: RP },
                )
                .setFooter({ text: `ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${interaction.user.id}` });

            const row = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId(`accept_${interaction.user.id}`)
                    .setLabel("–ü—Ä–∏–Ω—è—Ç—å")
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId(`reject_${interaction.user.id}`)
                    .setLabel("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                    .setStyle(ButtonStyle.Danger),
            );

            const targetChannel = interaction.guild.channels.cache.find(
                (ch) => ch.name === targetChannelName,
            );

            if (!targetChannel) {
                await interaction.reply({
                    content: `–ö–∞–Ω–∞–ª "${targetChannelName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
                    ephemeral: true,
                });
                return;
            }

            await targetChannel.send({ embeds: [embed], components: [row] });
            await interaction.reply({
                content: "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!",
                ephemeral: true,
            });
        }

        if (
            interaction.isButton() &&
            interaction.customId.startsWith("reject_")
        ) {
            const userId = interaction.customId.split("_")[1];

            let member;
            try {
                member = await interaction.guild.members.fetch(userId);

                if (!member) {
                    return interaction.reply({
                        content: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        ephemeral: true,
                    });
                }

                await member.send("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");

                await interaction.reply({
                    content: `–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.user.tag} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`,
                    ephemeral: true,
                });
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞:", error);
                await interaction.reply({
                    content: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∫–µ—Ç—ã.",
                    ephemeral: true,
                });
            }
        }

        if (
            interaction.isButton() &&
            interaction.customId.startsWith("accept_")
        ) {
            const userId = interaction.customId.split("_")[1];
            const user = await interaction.guild.members.fetch(userId);

            if (!user) {
                return interaction.reply({
                    content: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    ephemeral: true,
                });
            }

            const channels = interaction.guild.channels.cache
                .filter(
                    (ch) => ch.type === 0 && ch.parentId === targetCategoryId,
                )
                .map((ch) => ({
                    label: ch.name,
                    value: ch.id,
                }));

            if (!channels.length) {
                return interaction.reply({
                    content: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                    ephemeral: true,
                });
            }

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId(`select_channel_${userId}`) // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞")
                .addOptions(channels);

            const row = new ActionRowBuilder().addComponents(selectMenu);

            await interaction.reply({
                content: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞:",
                components: [row],
                ephemeral: true,
            });
        }

        if (
            interaction.isStringSelectMenu() &&
            interaction.customId.startsWith("select_channel_")
        ) {
            const userId = interaction.customId.split("_")[2];
            const user = await interaction.guild.members.fetch(userId);

            if (!user) {
                return interaction.reply({
                    content: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    ephemeral: true,
                });
            }

            const selectedChannelId = interaction.values[0];
            const roleId = roleMap[selectedChannelId];

            if (!roleId) {
                return interaction.reply({
                    content: "–û—à–∏–±–∫–∞: –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                    ephemeral: true,
                });
            }

            try {
                const botMember = await interaction.guild.members.fetchMe();

                if (!botMember.permissions.has("ManageRoles")) {
                    return interaction.reply({
                        content: "–û—à–∏–±–∫–∞: –ë–æ—Ç—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤.",
                        ephemeral: true,
                    });
                }

                await user.roles.add(roleId);
                await interaction.reply({
                    content: `–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user.username}!`,
                    ephemeral: true,
                });
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏:", error);
                await interaction.reply({
                    content: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞.",
                    ephemeral: true,
                });
            }
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
        if (!interaction.replied) {
            await interaction.reply({
                content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                ephemeral: true,
            });
        }
    }
});

client.on("messageCreate", async (message) => {
    if (message.content === "/RPMOD") {
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId("RolePlay")
                .setLabel("–°–æ–∑–¥–∞—Ç—å")
                .setStyle(ButtonStyle.Success),
        );
        const sendChannel = message.guild.channels.cache.find(
            (ch) => ch.name === sendChannelName,
        );
        if (!sendChannel) {
            console.error("err");
            return;
        }
        try {
            await sendChannel.send({
                content: "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –†–ü-–∞–Ω–∫–µ—Ç—É:",
                components: [row],
            });
        } catch (error) {
            console.error("err_2", error);
        }
    }
});





client.on(Events.InteractionCreate, async (interaction) => {
    try {
        if (interaction.isButton() && interaction.customId === "verifyCats") {
            const modal = new ModalBuilder()
                .setCustomId("verifmodal")
                .setTitle("Verify");

            const firstVerifQuestionCats = new TextInputBuilder()
                .setCustomId("firstVerifQuestionCats")
                .setLabel("–ò–º—è")
                .setPlaceholder("(–ü–æ –∂–µ–ª–∞–Ω–∏—é)")
                .setStyle(TextInputStyle.Short)
                .setRequired(false);

            const secondVerifQuestionCats = new TextInputBuilder()
                .setCustomId("secondVerifQuestionCats")
                .setLabel("–í–æ–∑—Ä–∞—Å—Ç")
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            const thirdVerifQuestionCats = new TextInputBuilder()
                .setCustomId("thirdVerifQuestionCats")
                .setLabel("–ö–∞–∫ –≤—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä?")
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true);

            const fourthVerifQuestionCats = new TextInputBuilder()
                .setCustomId("fourthVerifQuestionCats")
                .setLabel("–ó–Ω–∞–∫–æ–º—ã–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏?")
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true);


            const firstQuestionCats = new ActionRowBuilder().addComponents(firstVerifQuestionCats);
            modal.addComponents(firstQuestionCats);

            const secondQuestionCats = new ActionRowBuilder().addComponents(secondVerifQuestionCats);
            modal.addComponents(secondQuestionCats);

            const thirdQuestionCats = new ActionRowBuilder().addComponents(thirdVerifQuestionCats);
            modal.addComponents(thirdQuestionCats);

            const fourthQuestionCats = new ActionRowBuilder().addComponents(fourthVerifQuestionCats);
            modal.addComponents(fourthQuestionCats);

            await interaction.showModal(modal);
        }

        if (interaction.isModalSubmit() && interaction.customId === "verifmodal") {
            const firstQuestionCats_1 = interaction.fields.getTextInputValue("firstVerifQuestionCats") || "–ü—Ä–µ–¥–ø–æ—á–µ–ª –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å";
            const secondQuestionCats_1 = interaction.fields.getTextInputValue("secondVerifQuestionCats");
            const thirdQuestionCats_1 = interaction.fields.getTextInputValue("thirdVerifQuestionCats");
            const fourthQuestionCats_1 = interaction.fields.getTextInputValue("fourthVerifQuestionCats");

            const embed = new EmbedBuilder()
                .setColor("#FF0037")
                .setTitle("–ê–Ω–∫–µ—Ç–∞")
                .setThumbnail(
                    interaction.user.displayAvatarURL({
                        dynamic: true,
                        size: 1024,
                    })
                )
                .setAuthor({ name: interaction.user.username })
                .addFields({ name: "–ò–º—è", value: firstQuestionCats_1 })
                .addFields({ name: "–í–æ–∑—Ä–∞—Å—Ç", value: secondQuestionCats_1 })
                .addFields({ name: "–ö–∞–∫ –≤—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä?", value: thirdQuestionCats_1 })
                .addFields({ name: "–ò–º–µ–µ—Ç–µ –ª–∏ –≤—ã —Å–≤—è–∑–∏ —Å –∫–µ–º –ª–∏–±–æ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏?", value: fourthQuestionCats_1 })
                .setFooter({ text: `ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${interaction.user.id}` });


            const sendChannel = interaction.guild.channels.cache.find(
                (ch) => ch.name === sendChannelNameVerify
            );
            if (sendChannel) {
                const row = new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId("accept_2")
                        .setLabel("–ü—Ä–∏–Ω—è—Ç—å")
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId("reject_2")
                        .setLabel("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                        .setStyle(ButtonStyle.Danger)
                );

                const message = await sendChannel.send({ embeds: [embed], components: [row] });

                interaction.client.savedMessageId = message.id;
            } else {
                console.error("–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }

            await interaction.reply({ content: "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ephemeral: true });
        }

        if (interaction.isButton() && (interaction.customId === "accept_2" || interaction.customId === "reject_2")) {
            if (!interaction.message.embeds[0]?.footer?.text) {
                return interaction.reply({
                    content: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
                    ephemeral: true
                });
            }
            
            const memberId = interaction.message.embeds[0].footer.text.split(": ")[1];
            const member = await interaction.guild.members.fetch(memberId).catch(() => null);

            if (!member) {
                return interaction.reply({
                    content: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                    ephemeral: true,
                });
            }

            if (interaction.customId === "accept_2") {
                const roleId = "1324373740082954331";
                const roleRemoveId = "1324373601188577321";
                const role = interaction.guild.roles.cache.get(roleId);
                if (role) {
                    await member.roles.add(role);
                    await interaction.reply({ content: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!", ephemeral: true });

                    const message = await interaction.channel.messages.fetch(interaction.message.id);
                    const updatedEmbed = new EmbedBuilder()
                        .setColor("#00FF00")
                        .setTitle("–ê–Ω–∫–µ—Ç–∞")
                        .setDescription("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!")
                        .setFooter({ text: `ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${interaction.user.id}` });

                    await message.edit({ embeds: [updatedEmbed] });
                } else {
                    console.error("–†–æ–ª—å –ø–æ ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    await interaction.reply({
                        content: "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.",
                        ephemeral: true,
                    });
                }
            }

            if (interaction.customId === "reject_2") {
                try {
                    await member.send("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –≤—ã –ø–æ–∫–∏–¥–∞–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä.");
                    await member.kick("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");
                    await interaction.reply({ content: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞.", ephemeral: true });

                    const message = await interaction.channel.messages.fetch(interaction.message.id);
                    const updatedEmbed = new EmbedBuilder()
                        .setColor("#FF0000")
                        .setTitle("–ê–Ω–∫–µ—Ç–∞")
                        .setDescription("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä.")
                        .setFooter({ text: `ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${interaction.user.id}` });

                    await message.edit({ embeds: [updatedEmbed] });
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
                    await interaction.reply({
                        content: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞.",
                        ephemeral: true,
                    });
                }
            }
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:", error);
    }
});

client.on(Events.MessageCreate, async (message) => {
    if (message.content === "/verifyCats") {
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId("verifyCats")
                .setLabel("–ü—Ä–æ–π—Ç–∏")
                .setStyle(ButtonStyle.Primary)
        );
        await message.channel.send({ content: "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:", components: [row] });
    }
});

client.login(TOKEN);
